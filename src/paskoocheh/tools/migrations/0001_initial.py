# Generated by Django 3.2.23 on 2024-03-27 19:25

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import markdownx.models
import paskoocheh.helpers
import paskoocheh.mixins.image_with_cached_dimensions
import tools.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('stats', '0001_initial'),
        ('preferences', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified time')),
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('name', models.CharField(help_text='This is just a latin name for admin panel only', max_length=50, verbose_name='Tool name')),
                ('slug', models.SlugField(help_text='This slug will show in the URL for this app', max_length=75, unique=True, verbose_name='Tool slug')),
                ('last_update', models.DateTimeField(auto_now=True, help_text='Last time the tool was updated')),
                ('trusted', models.BooleanField(default=False, help_text="Whether you trust the tool's source", verbose_name='Trusted Source')),
                ('featured', models.BooleanField(default=False, help_text='Is this tool featured', verbose_name='Featured Tool')),
                ('opensource', models.BooleanField(default=False, verbose_name='Open source')),
                ('source', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Source url on Github or Bitbucket')),
                ('website', models.URLField(max_length=1000, unique=True, verbose_name='Main website of the tool')),
                ('facebook', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Facebook URL')),
                ('twitter', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Twitter URL')),
                ('rss', models.URLField(blank=True, null=True, verbose_name='Feed URL')),
                ('blog', models.URLField(blank=True, null=True, verbose_name='Link of the company blog')),
                ('contact_email', models.CharField(blank=True, max_length=500, null=True, verbose_name='Support email address')),
                ('contact_url', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Support url on the company website')),
                ('publishable', models.BooleanField(default=False, help_text='Check this box to publish post.', verbose_name='Publish')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tools', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('primary_tooltype', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='primary_tools', to='preferences.tooltype', verbose_name='Primary Tool Type')),
                ('tags', models.ManyToManyField(blank=True, related_name='tools', to='preferences.Tag', verbose_name='Tags')),
                ('tooltype', models.ManyToManyField(related_name='tools', to='preferences.ToolType', verbose_name='Tool Type')),
            ],
            options={
                'verbose_name': 'Tool',
                'verbose_name_plural': 'Tools',
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified time')),
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('version_number', models.CharField(help_text='Each version might have different number, when an update happens, this field must change or the user will not receive a notification', max_length=128, verbose_name='Tool version number')),
                ('release_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Actual release date from publisher')),
                ('release_jdate', models.CharField(max_length=32, verbose_name='Release date in Jalali')),
                ('download_url', models.CharField(blank=True, max_length=1000, verbose_name='Download url')),
                ('release_url', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Link to the release news if any')),
                ('package_name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Android-specific Package Name')),
                ('auto_update', models.BooleanField(default=True, verbose_name='Android-specific Automatic Update')),
                ('permissions', models.TextField(blank=True, null=True, verbose_name='Android-specific App Permissions (CSV)')),
                ('guide_url', models.CharField(blank=True, default='', max_length=1000, verbose_name='Guide url')),
                ('faq_url', models.CharField(blank=True, default='', max_length=1000, verbose_name='FAQ url')),
                ('publishable', models.BooleanField(default=True, help_text='Check this box to publish post.', verbose_name='Publish')),
                ('video', models.FileField(blank=True, help_text='If set while Video Link is also set, the uploaded video will not be displayed as the embedded video (Video Link) is the default.', null=True, upload_to=tools.models.get_video_upload_to, verbose_name='Video File')),
                ('video_link', models.URLField(blank=True, null=True, verbose_name='Video Link')),
                ('is_bundled_app', models.BooleanField(default=False, verbose_name='Android-specific Bundled App')),
                ('supported_os', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='preferences.platform', verbose_name='Platforms')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='tools.tool', verbose_name='Corresponding tool')),
            ],
            options={
                'verbose_name': 'Version',
                'verbose_name_plural': 'Versions',
                'unique_together': {('tool', 'supported_os')},
            },
        ),
        migrations.CreateModel(
            name='VersionCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified time')),
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created time')),
                ('version_code', models.IntegerField(default=0)),
                ('uploaded_file', models.FileField(blank=True, null=True, upload_to=tools.models.update_filename, verbose_name='Release Binary')),
                ('checksum', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Checksum for release binary')),
                ('size', models.IntegerField(blank=True, default=0, verbose_name='Size of download in bytes')),
                ('signature', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Binary Signature')),
                ('sig_file', models.FileField(blank=True, null=True, upload_to='', verbose_name='Signature File')),
                ('devices', models.ManyToManyField(blank=True, related_name='device_version_codes', to='preferences.AndroidDeviceProfile', verbose_name='Devices')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='version_codes', to='tools.version')),
            ],
            options={
                'verbose_name': 'Version Code',
                'verbose_name_plural': 'Version Codes',
            },
        ),
        migrations.CreateModel(
            name='Tutorial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified time')),
                ('language', models.CharField(choices=[('en', 'English'), ('fa', 'Persian'), ('ar', 'Arabic')], default='fa', max_length=2, verbose_name='Language')),
                ('video', models.FileField(blank=True, help_text='If set while Video Link is also set, the uploaded video will not be displayed as the embedded video (Video Link) is the default.', null=True, upload_to=tools.models.get_video_upload_to, verbose_name='Video File')),
                ('video_link', models.URLField(blank=True, null=True, verbose_name='Video Link')),
                ('title', models.CharField(default='', max_length=1000, verbose_name='Title')),
                ('order', models.IntegerField(default=1, verbose_name='Order')),
                ('publishable', models.BooleanField(default=True, help_text='Check this box to publish post.', verbose_name='Publish')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutorials', to='tools.version', verbose_name='Corresponding version')),
            ],
            options={
                'verbose_name': 'Tutorial',
                'verbose_name_plural': 'Tutorials',
                'ordering': ['version', 'order'],
            },
        ),
        migrations.CreateModel(
            name='TeamAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.TextField(blank=True, null=True)),
                ('pros', models.TextField(blank=True, null=True)),
                ('cons', models.TextField(blank=True, null=True)),
                ('tool', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='team_analysis', to='tools.tool')),
            ],
            options={
                'verbose_name_plural': 'Team Analysis',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified time')),
                ('image', models.ImageField(upload_to=tools.models.get_image_image_upload_to, verbose_name='Image File')),
                ('image_type', models.CharField(choices=[('logo', 'LOGO'), ('screenshot', 'SCREENSHOT'), ('header', 'HEADER')], default='logo', max_length=50, verbose_name='Image Type')),
                ('object_id', models.PositiveIntegerField()),
                ('width', models.IntegerField(default=0, null=True)),
                ('height', models.IntegerField(default=0, null=True)),
                ('should_display_full_bleed', models.BooleanField(default=False, help_text='If checked, and if the image is a logo image, clients should display it full-bleed (without any padding). Full-bleed images should have a coloured background and internal padding, or a transparent background and internal padding. Has no effect on non-logo images.', verbose_name='Should display full-bleed')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('publish', models.BooleanField(default=True, verbose_name='Publish')),
                ('language', models.CharField(blank=True, choices=[('en', 'English'), ('fa', 'Persian'), ('ar', 'Arabic')], default=None, help_text='If set, this image will only appear in the specified language. Otherwise, it will appear in all languages.', max_length=2, null=True, verbose_name='Language')),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'tools'), ('model', 'tool')), models.Q(('app_label', 'tools'), ('model', 'version')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, related_name='images', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
                'ordering': ['image_type'],
            },
            bases=(models.Model, paskoocheh.mixins.image_with_cached_dimensions.ImageWithCachedDimensionsMixin),
        ),
        migrations.CreateModel(
            name='HomeFeaturedTool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promo_text', models.CharField(blank=True, max_length=250, verbose_name='Promo text')),
                ('tool', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tools.tool', verbose_name='Tool')),
            ],
            options={
                'verbose_name': 'Homepage Featured Tool',
                'verbose_name_plural': 'Homepage Featured Tool',
            },
        ),
        migrations.CreateModel(
            name='Guide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified time')),
                ('language', models.CharField(choices=[('en', 'English'), ('fa', 'Persian'), ('ar', 'Arabic')], default='fa', max_length=2, verbose_name='Language')),
                ('headline', models.CharField(max_length=1000)),
                ('body', markdownx.models.MarkdownxField()),
                ('order', models.IntegerField(default=1, verbose_name='Order')),
                ('publishable', models.BooleanField(default=True, help_text='Is publishable (can appear on site)', verbose_name='Publish')),
                ('slug', models.SlugField(blank=True, help_text='If this is set, you can append “#[slug]” to the amalgamated guide page URL to link to this step.', max_length=20, null=True, validators=[paskoocheh.helpers.validate_slug_strict], verbose_name='URL slug')),
                ('video', models.FileField(blank=True, help_text='Once the file to be uploaded has been saved, an HTML code snippet will be provided.', null=True, upload_to=tools.models.get_video_upload_to, verbose_name='Video File')),
                ('version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tools.version', verbose_name='Corresponding version')),
            ],
            options={
                'ordering': ['version', 'order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Faq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified time')),
                ('language', models.CharField(choices=[('en', 'English'), ('fa', 'Persian'), ('ar', 'Arabic')], default='fa', max_length=2, verbose_name='Language')),
                ('headline', models.CharField(max_length=1000)),
                ('body', markdownx.models.MarkdownxField()),
                ('order', models.IntegerField(default=1, verbose_name='Order')),
                ('publishable', models.BooleanField(default=True, help_text='Is publishable (can appear on site)', verbose_name='Publish')),
                ('click_count', models.IntegerField(default=0, verbose_name='Click count')),
                ('video', models.FileField(blank=True, help_text='Once the file to be uploaded has been saved, an HTML code snippet will be provided.', null=True, upload_to=tools.models.get_video_upload_to, verbose_name='Video File')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='tools.tool', verbose_name='Corresponding tool')),
                ('version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tools.version', verbose_name='Corresponding version')),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQs',
            },
        ),
        migrations.CreateModel(
            name='AndroidSplitFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('split_file', models.FileField(upload_to=tools.models.split_file_upload_location)),
                ('size', models.IntegerField(blank=True, default=0, verbose_name='Size (bytes)')),
                ('devices', models.ManyToManyField(related_name='splits', to='preferences.AndroidDeviceProfile', verbose_name='Devices')),
                ('tool_version_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='android_split_files', to='tools.versioncode')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tools.version')),
            ],
            options={
                'verbose_name': 'Split File',
                'verbose_name_plural': 'Split Files',
            },
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified time')),
                ('language', models.CharField(choices=[('en', 'English'), ('fa', 'Persian'), ('ar', 'Arabic')], default='fa', max_length=2, verbose_name='Language')),
                ('name', models.CharField(help_text='Name of the tool in the corresponding language', max_length=100, unique=True, verbose_name='Language-specific name')),
                ('company', models.CharField(max_length=100, verbose_name='Company name')),
                ('description', markdownx.models.MarkdownxField(blank=True, help_text='Description of tool, max 2000 character', null=True, verbose_name='Description')),
                ('seo_description', models.TextField(blank=True, help_text='The descriptive text displayed underneath a headline in search engine results.', verbose_name='SEO description')),
                ('publishable', models.BooleanField(default=True, help_text='Info is publishable (can appear on site)', verbose_name='Publish')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infos', to='tools.tool', verbose_name='Corresponding tool')),
            ],
            options={
                'verbose_name': 'Information about the tool',
                'verbose_name_plural': 'Tools information',
                'unique_together': {('tool', 'language')},
            },
        ),
        migrations.CreateModel(
            name='CategoryAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.DecimalField(decimal_places=1, default=5, max_digits=2, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)], verbose_name='Star Rating')),
                ('rating_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stats.ratingcategory')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_categoryratings', to='tools.teamanalysis')),
            ],
            options={
                'verbose_name_plural': 'Category Analysis',
                'unique_together': {('tool', 'rating_category')},
            },
        ),
    ]
