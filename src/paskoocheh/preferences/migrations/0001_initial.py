# Generated by Django 3.2.23 on 2024-03-27 19:25

import django.core.validators
from django.db import migrations, models
import markdownx.models
import paskoocheh.helpers
import paskoocheh.mixins.image_with_cached_dimensions
import preferences.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AndroidDeviceProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True, verbose_name='Name')),
                ('codename', models.SlugField(max_length=39, verbose_name='Code Name')),
                ('properties', models.JSONField(blank=True, null=True, verbose_name='Device Properties (JSON)')),
                ('status', models.CharField(choices=[('ready', 'Ready'), ('added', 'Added'), ('completed', 'Completed'), ('not_found', 'Not Found')], default='completed', max_length=32)),
            ],
            options={
                'verbose_name': 'Android Device Profile',
                'verbose_name_plural': 'Android Device Profiles',
            },
        ),
        migrations.CreateModel(
            name='GeneralPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_email', models.CharField(help_text='The email address from which notification emails such as support or contact update emails will be sent.<br /><strong>WARNING: Please arrange with SysOps before changing these values.</strong>', max_length=254, verbose_name='From Email')),
                ('support_recipient_emails', models.TextField(help_text='The email address(es) to which notification emails such as support or contact update emails will be sent.<br /><strong>WARNING: Please arrange with SysOps before changing these values.</strong>', max_length=1024, verbose_name='Support Ticket Recipients (comma separated)')),
                ('support_email', models.CharField(max_length=254, null=True, verbose_name='Support Email Address')),
                ('twitter', models.CharField(blank=True, max_length=254, null=True, verbose_name='Twitter')),
                ('facebook', models.CharField(blank=True, max_length=254, null=True, verbose_name='Facebook')),
                ('instagram', models.CharField(blank=True, max_length=254, null=True, verbose_name='Instagram')),
                ('telegram', models.CharField(blank=True, max_length=254, null=True, verbose_name='Telegram')),
            ],
            options={
                'verbose_name': 'General Settings',
                'verbose_name_plural': 'General Settings',
            },
        ),
        migrations.CreateModel(
            name='GooglePlayApiPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('android_id', models.CharField(blank=True, max_length=64, null=True, verbose_name='Android ID')),
                ('google_user', models.CharField(blank=True, max_length=128, null=True, verbose_name='Email Address')),
                ('google_pass', models.CharField(blank=True, max_length=128, null=True, verbose_name='Password')),
                ('token', models.CharField(blank=True, max_length=512, null=True, verbose_name='Token')),
            ],
            options={
                'verbose_name': 'Google Play API',
                'verbose_name_plural': 'Google Play API',
            },
        ),
        migrations.CreateModel(
            name='PaskoochehAndroidPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('android_update_emails', models.TextField(max_length=64, verbose_name='Update Recipients (csv)')),
            ],
            options={
                'verbose_name': 'Android Apps',
                'verbose_name_plural': 'Android Apps',
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Platform Name')),
                ('display_name_fa', models.CharField(max_length=64, verbose_name='Platform Name in Farsi')),
                ('display_name_ar', models.CharField(blank=True, max_length=64, null=True, verbose_name='Platform Name in Arabic')),
                ('display_name', models.CharField(max_length=64)),
                ('slug_name', models.CharField(help_text='<strong>WARNING: Please arrange with the development team before adding/changing this value.</strong>', max_length=64, validators=[paskoocheh.helpers.validate_platform_slug_strict])),
                ('category', models.CharField(choices=[('d', 'Desktop'), ('m', 'Mobile'), ('w', 'Web')], default='d', max_length=1)),
                ('icon', models.FileField(blank=True, null=True, upload_to=preferences.models.get_platform_icon_upload_to, validators=[django.core.validators.FileExtensionValidator(['jpg', 'png', 'svg'])], verbose_name='Tool Type Icon')),
            ],
        ),
        migrations.CreateModel(
            name='PromoImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=preferences.models.get_promoimage_image_upload_to, verbose_name='Promo Image')),
                ('title', models.CharField(max_length=1000, verbose_name='Image title')),
                ('link', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Link URL')),
                ('new_window', models.BooleanField(default=True, verbose_name='Open in new window?')),
                ('behaviour', models.CharField(blank=True, choices=[('Download APK overlay', 'AndroidOverlay')], max_length=32, null=True, verbose_name='Custom Behavior for Promo Image')),
                ('language', models.CharField(choices=[('en', 'English'), ('fa', 'Persian'), ('ar', 'Arabic')], default='fa', max_length=2, verbose_name='Language')),
                ('publish', models.BooleanField(default=True)),
                ('width', models.IntegerField(default=0, null=True)),
                ('height', models.IntegerField(default=0, null=True)),
                ('order', models.IntegerField(default=1, verbose_name='Order')),
            ],
            options={
                'ordering': ['order'],
            },
            bases=(models.Model, paskoocheh.mixins.image_with_cached_dimensions.ImageWithCachedDimensionsMixin),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True, verbose_name='Tag Name')),
                ('slug', models.SlugField(default='', max_length=20, validators=[paskoocheh.helpers.validate_slug_strict], verbose_name='Tag slug')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(choices=[('en', 'English'), ('fa', 'Persian'), ('ar', 'Arabic')], default='fa', max_length=2, verbose_name='Language')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('about', markdownx.models.MarkdownxField(blank=True, null=True, verbose_name='About Paskoocheh')),
                ('contact_email', models.CharField(blank=True, max_length=64, null=True, verbose_name='Contact Email')),
                ('privacy_policy', markdownx.models.MarkdownxField(blank=True, null=True, verbose_name='Privacy Policy')),
                ('terms_and_privacy', markdownx.models.MarkdownxField(blank=True, help_text='Note: This field is deprecated as terms of service and privacy policy texts have been separated into two pages', null=True, verbose_name='Terms of Service and Privacy Policy')),
                ('terms_of_service', markdownx.models.MarkdownxField(blank=True, null=True, verbose_name='Terms of Service')),
                ('telegraph_footer', markdownx.models.MarkdownxField(blank=True, null=True, verbose_name='FAQ Page Footer')),
                ('publishable', models.BooleanField(default=True, help_text='Check this box to publish post.', verbose_name='Publish')),
            ],
            options={
                'verbose_name_plural': 'Web Texts',
            },
        ),
        migrations.CreateModel(
            name='ToolType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Type Name')),
                ('name_fa', models.CharField(max_length=256, null=True, verbose_name='Type Name in Farsi')),
                ('name_ar', models.CharField(blank=True, max_length=256, null=True, verbose_name='Type Name in Arabic')),
                ('slug', models.SlugField(default='', max_length=20, validators=[paskoocheh.helpers.validate_slug_strict], verbose_name='Type URL slug')),
                ('icon', models.FileField(blank=True, null=True, upload_to=preferences.models.get_tooltype_icon_upload_to, validators=[django.core.validators.FileExtensionValidator(['jpg', 'png', 'svg'])], verbose_name='Tool Type Icon')),
            ],
        ),
    ]
